@using SegurosMaticAPI.Modelos
@inject HttpClient Http
@inject IToastService ToastService

@if (Asegurado != null && Seguros != null)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Asignar Seguros a @(Asegurado?.Nombre ?? "")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Cancelar"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Asegurado" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Seguros Disponibles</label>
                            <div class="overflow-auto h-48 border rounded p-2">
                                @if (Seguros.Any())
                                {
                                    @foreach (var seguro in Seguros)
                                    {
                                        bool isSelected = Asegurado.Seguros.Any(s => s.Id == seguro.Seguro.Id);
                                        <div class="form-check">
                                            <input type="checkbox"
                                                   checked="@isSelected"
                                                   @onchange="@(e => OnSeguroSelected(seguro.Seguro, e))"
                                                   id="@($"seguro_{seguro.Seguro.Id}")"
                                                   class="form-check-input" />
                                            <label for="@($"seguro_{seguro.Seguro.Id}")"
                                                   class="form-check-label">
                                                @seguro.Seguro.Nombre
                                            </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted text-center py-2">
                                        No hay seguros disponibles
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Guardar</button>
                            <button type="button" @onclick="Cancelar" class="btn btn-secondary">Cancelar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Asegurado Asegurado { get; set; }
    [Parameter] public List<SeguroViewModel> Seguros { get; set; }
    [Parameter] public EventCallback<List<Seguro>> OnGuardar { get; set; }
    [Parameter] public EventCallback OnCancelar { get; set; }

    protected override void OnInitialized()
    {
        Asegurado ??= new Asegurado();
        Seguros ??= new List<SeguroViewModel>();
    }

    private void OnSeguroSelected(Seguro seguro, ChangeEventArgs e)
    {
        if (e.Value is bool isSelected)
        {
            if (isSelected && !Asegurado.Seguros.Any(s => s.Id == seguro.Id))
            {
                Asegurado.Seguros.Add(seguro);
            }
            else if (!isSelected)
            {
                var seguroToRemove = Asegurado.Seguros.FirstOrDefault(s => s.Id == seguro.Id);
                if (seguroToRemove != null)
                {
                    Asegurado.Seguros.Remove(seguroToRemove);
                }
            }
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await OnGuardar.InvokeAsync(Asegurado.Seguros);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Error al guardar los seguros");
            Console.WriteLine($"Error al guardar asignaciones de seguros: {ex.Message}");
        }
    }

    private async Task Cancelar()
    {
        try
        {
            await OnCancelar.InvokeAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error en acción de cancelar: {ex.Message}");
        }
    }

    public class SeguroViewModel
    {
        public Seguro Seguro { get; set; }
        public bool IsSelected { get; set; }
    }
}
